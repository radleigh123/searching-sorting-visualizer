import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SortingVisualizer extends JFrame {
    private static final int BAR_WIDTH = 10; //controls how many is the bar
    private static final int BAR_HEIGHT_MULTIPLIER = 6; // Adjusted height multiplier
    private int[] array; //holds arrays 
    private Color[] barColors; //controls the bars color
    private int delay = 200; //the default speed of the slider

    private void linearSearch(int target, BarPanel barPanel) {
        final boolean[] targetFound = {false}; // Array to make it effectively final
        final int[] previousIndex = {-1}; // Array to make it mutable

        for (int i = 0; i < array.length; i++) {
            final int currentIndex = i;

            SwingUtilities.invokeLater(() -> {
                        if (!targetFound[0]) {
                            if (previousIndex[0] != -1) {
                                barColors[previousIndex[0]] = Color.RED; // Reset the color of the previous bar
                            }
                            barColors[currentIndex] = Color.GREEN; // Set the color of the current bar to green
                            barPanel.repaint();
                        }
                });

            try {
                Thread.sleep(delay); // Use the delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (array[i] == target) {
                targetFound[0] = true;
                final int foundIndex = i;
                SwingUtilities.invokeLater(() -> {
                            barColors[foundIndex] = Color.GREEN; // Target found
                            barPanel.repaint(); //repaints the color red to green when target is found
                            showIndexFoundDialog("Linear Search", foundIndex);
                    });
                break;
            }
            previousIndex[0] = currentIndex;
        }
    }
        
    //this will be used in the bars for coloring depending on the array
    private void arrayFill(Color[] array, int start, int end, Color color) {
        for (int i = start; i < end; i++) { 
            array[i] = color;
        }   
    }
    
    //performs the binarysearch and the swingworker helps it search in the background
    private void binarySearch(int[] sortedArray, int target, BarPanel barPanel) {
        int low = 0;
        int high = sortedArray.length - 1;

        SwingWorker<Void, Void> worker = new SwingWorker<>() {
                @Override
                protected Void doInBackground() throws Exception {
                    binarySearchHelper(sortedArray, target, low, high, barPanel);
                    return null;
                }
            };

        worker.execute();
    }

    // Add this method to display the dialog message
    private void showIndexFoundDialog(String searchAlgorithm, int foundIndex) {
        String message = "Index found at position: " + foundIndex;
        JOptionPane.showMessageDialog(this, message, searchAlgorithm + " Result", JOptionPane.INFORMATION_MESSAGE);
    }
    
    //helps the binarysearch method mentioned before
    private void binarySearchHelper(int[] sortedArray, int target, int low, int high, BarPanel barPanel) {
        final int[] highlightedIndex = {-1}; // Array to make it effectively final

        while (low <= high) {
            int mid = (low + high) / 2;
            final int midIndex = mid;

            // Reset the color of the previously highlighted bar to default color
            if (highlightedIndex[0] != -1) {
                final int finalHighlightedIndex = highlightedIndex[0];
                SwingUtilities.invokeLater(() -> {
                            if (highlightedIndex[0] != -1) {
                                barColors[highlightedIndex[0]] = Color.RED; // Reset the color of the previous bar
                            }
                            barPanel.repaint();
                    });
            }

            // Set the color of the current bar being compared to white
            SwingUtilities.invokeLater(() -> {
                        barColors[midIndex] = Color.BLUE;
                        highlightedIndex[0] = midIndex; // Update the highlighted index
                        barPanel.repaint();
                });

            try {
                Thread.sleep(delay); // Use the delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            // If the target is found
            if (sortedArray[mid] == target) {
                final int foundIndex = mid;
                SwingUtilities.invokeLater(() -> {
                            barPanel.repaint();
                            showIndexFoundDialog("Binary Search", foundIndex);
                    });
                return;
            }

            // If the target is in the left half
            if (sortedArray[mid] > target) {
                high = mid - 1;
            } else { // If the target is in the right half
                low = mid + 1;
            }
        }
    }

    //checks if the bars are sorted and calls the isSorted method and performs either from the algorithms
    private void sortAndSearchArray(String algorithm, int target, BarPanel barPanel) {
        if (algorithm.equals("Linear Search")) {
            new Thread(() -> linearSearch(target, barPanel)).start();
        } else if (algorithm.equals("Binary Search")) {
            if (!isSorted()) {
                JOptionPane.showMessageDialog(this, "Array must be sorted before performing Binary Search.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            new Thread(() -> binarySearch(array, target, barPanel)).start();
        } else {
            new Thread(() -> sortArray(algorithm, barPanel)).start();
        }
    }

    // Add this method to check if the array is sorted
    private boolean isSorted() {
        for (int i = 1; i < array.length; i++) {
            if (array[i - 1] > array[i]) {
                return false;
            }
        }
        return true;
    }
    
    private void bubbleSort(BarPanel barPanel) {        
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    // swap array[j] and array[j+1]
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;

                    Color tempColor = barColors[j];
                    barColors[j] = barColors[j + 1];
                    barColors[j + 1] = tempColor;

                    try {
                        Thread.sleep(delay); // Use the delay
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    SwingUtilities.invokeLater(() -> barPanel.repaint());
                }
            }
        }
    }

    private void selectionSort(BarPanel barPanel) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            // swap array[i] and array[minIndex]
            int temp = array[i];
            array[i] = array[minIndex];
            array[minIndex] = temp;

            Color tempColor = barColors[i];
            barColors[i] = barColors[minIndex];
            barColors[minIndex] = tempColor;

            try {
                Thread.sleep(delay); // Use the delay
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            SwingUtilities.invokeLater(() -> barPanel.repaint());
        }
    }

    private void quickSort(int low, int high, BarPanel barPanel) {
        if (low < high) {
            int pi = partition(low, high, barPanel);

            // Recursively sort elements before and after partition
            quickSort(low, pi - 1, barPanel);
            quickSort(pi + 1, high, barPanel);
        }
    }

    private int partition(int low, int high, BarPanel barPanel) {
        int pivot = array[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;

                // swap array[i] and array[j]
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;

                Color tempColor = barColors[i];
                barColors[i] = barColors[j];
                barColors[j] = tempColor;

                try {
                    Thread.sleep(delay); // Use the delay
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                SwingUtilities.invokeLater(() -> barPanel.repaint());
            }
        }

        // swap array[i+1] and array[high] (or pivot)
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;

        Color tempColor = barColors[i + 1];
        barColors[i + 1] = barColors[high];
        barColors[high] = tempColor;

        try {
            Thread.sleep(delay); // Use the delay
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        SwingUtilities.invokeLater(() -> barPanel.repaint());

        return i + 1;
    }

    private class BarPanel extends JPanel {
        private boolean isSorted = false;

        public BarPanel() {
            // Initialize all bars to red before sorting
            barColors = new Color[array.length];
            arrayFill(barColors, 0, barColors.length, Color.RED);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            // Set background color to light black
            setBackground(new Color(30, 30, 30));

            // Display bars in red before sorting
            if (!isSorted) {
                for (int i = 0; i < array.length; i++) {
                    g.setColor(barColors[i]);
                    int barHeight = array[i] * BAR_HEIGHT_MULTIPLIER;
                    int x = i * (BAR_WIDTH + 2);
                    int y = getHeight() - barHeight;
                    g.fillRect(x, y, BAR_WIDTH, barHeight);
                }
            } else {
                // Display bars in green after sorting
                for (int i = 0; i < array.length; i++) {
                    g.setColor(Color.GREEN);
                    int barHeight = array[i] * BAR_HEIGHT_MULTIPLIER;
                    int x = i * (BAR_WIDTH + 2);
                    int y = getHeight() - barHeight;
                    g.fillRect(x, y, BAR_WIDTH, barHeight);
                }
            }
        }

        public void setSorted(boolean sorted) {
            isSorted = sorted;
        }

        public void resetColors() {
            // Reset all bars to red
            arrayFill(barColors, 0, barColors.length, Color.RED);
            isSorted = false;
            repaint();
        }
    }

    public SortingVisualizer() {
        setTitle("Sorting Algorithm Visualizer");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JSlider speedSlider = new JSlider(JSlider.HORIZONTAL, 0, 200, delay);
        speedSlider.setMajorTickSpacing(50);
        speedSlider.setPaintTicks(true);
        speedSlider.addChangeListener(e -> delay = speedSlider.getValue());
        add(speedSlider, BorderLayout.SOUTH);

        // Set the frame size to full screen
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice device = env.getDefaultScreenDevice();
        setBounds(0, 0, device.getDisplayMode().getWidth(), device.getDisplayMode().getHeight());

        array = createRandomArray(device.getDisplayMode().getWidth() / (BAR_WIDTH + 2)); // Adjust the number of bars based on screen width
        barColors = generateRandomColors(array);

        JPanel buttonPanel = new JPanel();
        JComboBox<String> algorithmComboBox = new JComboBox<>(new String[]{"Bubble Sort", "Selection Sort", "Quick Sort", "Linear Search", "Binary Search"});
        JButton sortButton = new JButton("Choose");
        JButton resetButton = new JButton("Reset Bars");

        buttonPanel.add(new JLabel("Select Sorting Algorithm and Searching Algorithm:"));
        buttonPanel.add(algorithmComboBox);
        buttonPanel.add(sortButton);
        buttonPanel.add(resetButton);

        add(buttonPanel, BorderLayout.NORTH);
        BarPanel barPanel = new BarPanel();
        add(barPanel, BorderLayout.CENTER);

        sortButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String selectedAlgorithm = (String) algorithmComboBox.getSelectedItem();

                    if (selectedAlgorithm.equals("Linear Search") || selectedAlgorithm.equals("Binary Search")) {
                        int target = 0;
                        boolean validInput = false;

                        while (!validInput) {
                            String input = JOptionPane.showInputDialog("Enter the target element:");

                            if (input == null) {
                                // User clicked cancel
                                return; // Return without proceeding with sorting
                            } else if (input.trim().isEmpty()) {
                                JOptionPane.showMessageDialog(SortingVisualizer.this, "Please enter an element number.", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                try {
                                    target = Integer.parseInt(input);

                                    // Validate that the target is within the valid range (0-99)
                                    if (target < 0 || target > 99) {
                                        JOptionPane.showMessageDialog(SortingVisualizer.this, "Please enter an element number between 0 and 99.", "Error", JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        validInput = true;
                                    }
                                } catch (NumberFormatException ex) {
                                    JOptionPane.showMessageDialog(SortingVisualizer.this, "Please enter a valid integer for the element number.", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }

                        // Proceed with sorting only if a valid input is provided
                        final int finalTarget = target;
                        final BarPanel finalBarPanel = barPanel;
                        sortAndSearchArray(selectedAlgorithm, finalTarget, finalBarPanel);
                    } else {
                        new Thread(() -> sortArray(selectedAlgorithm, barPanel)).start();
                    }
                }
            });

        resetButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    array = createRandomArray(device.getDisplayMode().getWidth() / (BAR_WIDTH + 2));
                    barPanel.resetColors();
                }
            });
        setVisible(true);
    }

    private int[] sortArray(String algorithm, BarPanel barPanel) {
        switch (algorithm) {
            case "Bubble Sort":
                bubbleSort(barPanel);
                break;
            case "Selection Sort":
                selectionSort(barPanel);
                break;
            case "Quick Sort":
                quickSort(0, array.length - 1, barPanel);
                break;
            default:
                break;
        }

        // Return the sorted array
        return array.clone();
    }

    private Color[] generateRandomColors(int[] array) {
        Color[] colors = new Color[array.length];

        // Create a gradient of colors based on the initial order of the array
        for (int i = 0; i < array.length; i++) {
            float hue = (float) i / array.length; // Vary the hue across the array
            colors[i] = Color.getHSBColor(hue, 1.0f, 1.0f);
        }

        return colors;
    }

    private int[] createRandomArray(int size) {
        int[] arr = new int[size];  

        // Fill the array with values in descending order
        for (int i = 0; i < size; i++) {
            arr[i] = size - i;
        }

        // Shuffle the array using Fisher-Yates algorithm (optional)
        for (int i = size - 1; i > 0; i--) {
            int j = (int) (Math.random() * (i + 1));
            // Swap arr[i] and arr[j]   
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }

        return arr;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SortingVisualizer());
    }
}